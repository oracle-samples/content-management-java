/*
 * Copyright (c) 2023, Oracle and/or its affiliates.
 * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
 */
 
apply plugin: 'java-library'
apply plugin: 'com.android.lint'


project.apply from: "${rootDir}/constants.gradle"

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allJava
}

lintOptions {
    checkAllWarnings false
    ignoreWarnings true
    warningsAsErrors false
    htmlReport true
    abortOnError false
    quiet true
    disable 'UnknownNullness','NewerVersionAvailable','FieldGetter'
    xmlReport true
    xmlOutput file("build/test-results/lint-results.xml")
    textReport true
    textOutput file("build/test-results/lint-results.txt")
}

//apply from: 'dependency-license.gradle'
apply plugin: 'com.github.jk1.dependency-license-report'

import com.github.jk1.license.render.*
import com.github.jk1.license.importer.*

licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    outputDir = "${project.buildDir}/reports/3rdparty"

    // Select projects to examine for dependencies.
    // Defaults to current project and all its subprojects
    //projects = [project] + project.subprojects

    // Adjust the configurations to fetch dependencies, e.g. for Android projects. Default is 'runtimeClasspath'
    //configurations = ['runtimeClasspath']
    // Use 'ALL' to dynamically resolve all configurations:
    // configurations = ALL

    // List the groups ids to exclude from dependency report. Supports regular expressions.
    // For finer granularity, see: excludes.
    excludeGroups = ['androidx.*','com.google.*']

    // List the ids (in module:name format) to exclude from dependency report. Supports regular expressions.
    // By default excludes is empty.
    //excludes = ['oracle.cloud.mobile:oce-delivery-sdk']

    // Don't include artifacts of project's own group into the report
    excludeOwnGroup = true

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
    //renderers = [new XmlReportRenderer('third-party-libs.xml', 'Back-End Libraries')]
    //renderers = [new InventoryHtmlReportRenderer('report.html','OCE Minimal App')]

    // Set importers to import any external dependency information, i.e. from npm.
    // Custom importer should implement DependencyDataImporter interface.
    //importers = [new XmlReportImporter('Frontend dependencies', file(frontend_libs.xml))]

    // This is for the allowed-licenses-file in checkLicense Task
    // Accepts File, URL or String path to local or remote file
    //allowedLicensesFile = new File("$projectDir/config/allowed-licenses.json")
}


ext {
    distributionDir = "$project.buildDir/binaryDist"
    sdkName = "$project.name-$project.version"
}

// assemble all the SDK components for a binary distribution
task createBinaryDistribution(type: Copy) {

    dependsOn javadoc
    dependsOn assemble

    from project.docsDir
    from file {"$rootDir/README.md"}
    from file {"$rootDir/LICENSE.txt"}
    from file {"$rootDir/THIRD_PARTY_LICENSES.txt"}
    from file {"$project.buildDir/libs/$sdkName" + ".jar"}

    into project.file("$distributionDir")

}

// zip up the entire binary distribution and put in 'publish' folder
task publishBinaryDistributionZip(type: Zip) {
    dependsOn createBinaryDistribution

    from "$distributionDir"
    include '**/*'
    archiveName ("$sdkName" + '.zip')
    destinationDir(file("$buildDir/publish"))
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// to pass in command-line properties to unit tests
test {
    systemProperties(System.getProperties())
}

dependencies {

    // core dependencies required by SDK
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation 'com.google.code.gson:gson:2.10'
    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.3"
    implementation 'com.squareup.okio:okio:3.0.0'
    implementation 'org.jetbrains:annotations:23.0.0'
    implementation "io.reactivex.rxjava3:rxjava:3.1.0"
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'

    // unit test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    testImplementation 'org.apache.commons:commons-lang3:3.10'
}
